/* ------------------------------------------ */
/* Custom properties                          */
/* ------------------------------------------ */

:root {
    /* Colors */
    --clr-dark: 248 93% 61%;
    --clr-extra-dark: 244 30% 27%;
    --clr-white: 0 0% 100%;
    --clr-accent1-dark: 358 77% 65%;
    --clr-accent1-light: 6 100% 98%;
    --clr-accent2-dark: 41 74% 64%;
    --clr-accent2-light: 42 100% 97%;
    --clr-accent3-dark: 165 49% 44%;
    --clr-accent3-light: 173 53% 97%;
    --clr-accent4-dark: 237 38% 48%;
    --clr-accent4-light: 240 71% 97%;
           
    /* font-sizes */
    --fs-800: 3.375rem;
    --fs-700: 1.5rem;
    --fs-600: 1rem;
    --fs-500: 0.875rem;
    
    /* font-families */
    --ff-sans-normal: "Roboto", sans-serif;

    /* Border-radius
    --radius-small: 10%;
    --radius-medium: 30%;
    --radius-large: 50%; */
}

@media (min-width: 28em) {
    :root {
        /* font-sizes */
        --fs-800: 4.25rem;
        --fs-700: 2rem;
        --fs-600: 1.375rem;
        --fs-500: 1rem;
        }
}

/* ------------------------------------------ */
/*  Reset                                     */
/* ------------------------------------------ */

/* This reset in this project is a variation of https://piccalil.li/blog/a-modern-css-reset/ */

/* Box sizing */
*,
*::before,
*::after {
    box-sizing: border-box;
}

/* Reset margins */
body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture {
    margin: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
    font-weight: 400;
}

/* Set up the body */
body {
    font-family: var(--ff-sans-normal);
    font-size: var(--fs-400);
    background-color: hsl( var(--clr-white));
    color: hsl( var(--clr-extra-dark));
    line-height: 1.5;
    min-height: 100vh;
    /* display: grid;
    grid-template-rows: min-content 1fr; */
    overflow-x: hidden;
}

/* Make images easier to work with */
img,
picture {
    max-width: 100%;
    display: block;
}

/* Make form elements easier to work with */
input,
button,
textarea,
select {
    font: inherit;
}

ul {
    list-style: none;
    padding-left: 0;
}

/* remove animations for people who've turned them off */
@media (prefers-reduced-motion: reduce) {  
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
}

/* ------------------------------------------ */
/*  Utility classes                           */
/* ------------------------------------------ */

.flex {
    display: flex;
    gap: var(--gap, 1rem);
}

.grid {
    display: grid;
    gap: var(--gap, 1rem);
}

.d-block {
    display: block;
}

.flow > *:where(:not(:first-child)) {
    margin-top: var(--flow-space, 1rem);
}

/* colors */

.bg-dark { background-color: hsl( var(--clr-dark) );}
.bg-extra-dark { background-color: hsl( var(--clr-extra-dark) );}
.bg-white { background-color: hsl( var(--clr-white) );}
.bg-accent1 { background-color: hsl( var(--clr-accent1-light) ); }
.bg-accent2 { background-color: hsl( var(--clr-accent2-light) ); }
.bg-accent3 { background-color: hsl( var(--clr-accent3-light) ); }
.bg-accent4 { background-color: hsl( var(--clr-accent4-light) ); }

.text-dark { color: hsl( var(--clr-extra-dark) );}
.text-white { color: hsl( var(--clr-white) );}
.text-extra-dark-transparent { color: hsl( var(--clr-extra-dark) / .50 );}
.text-white-transparent { color: hsl( var(--clr-white) / .80 );}
.text-accent1 { color: hsl( var(--clr-accent1-dark) );}
.text-accent2 { color: hsl( var(--clr-accent2-dark) );}
.text-accent3 { color: hsl( var(--clr-accent3-dark) );}
.text-accent4 { color: hsl( var(--clr-accent4-dark) );}

/* typography */

.ff-sans-normal { font-family: var(--ff-sans-normal); } 

.fs-800 { font-size: var(--fs-800); }
.fs-700 { font-size: var(--fs-700); }
.fs-600 { font-size: var(--fs-600); }
.fs-500 { font-size: var(--fs-500); }

/* ------------------------------------------ */
/*  Components                                */
/* ------------------------------------------ */

/* Result circle */

.circle {
    width: 37%;
    border-radius: 50%;
    aspect-ratio: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    background-image: linear-gradient( hsl( var(--clr-extra-dark) ), hsl( var(--clr-dark) ));
}

.circle > p > span {
    display: block;
}

@media (min-width: 64em) {
    .circle {
        width: 55%;
    }
}

/* Summary topic */

.summary-topic {
    display: flex;
    width: 100%;
    justify-content: space-between;
    border-radius: 0.625rem;
    padding: 1.125rem;
}

/* Continue button */

.button {
    border-radius: 1.875rem;
    width: 100%;
    padding: 1.375rem;
    font-size: var(--fs-600);
    border: none;
}

.button:hover,
.button:focus {
    background-color: hsl( var(--clr-dark) );
    border: none;
}



/* ----------------------------- */
/* Layout                        */
/* ----------------------------- */

body {
    display: grid;
    grid-template-rows: auto 2rem;
}

main > .grid-container {
    display: grid;
    text-align: center;
    place-items: center;
    grid-template-areas: 
        'result-area'
        'summary-area';
}

#result-area,
#result,
#compliment,
#summary-area,
#summary {
    flex-direction: column;
    width: 100%;
    align-items: center;
}

main > .grid-container #result-area {
    grid-area: result-area;
    border-radius: 0 0 1.875rem 1.875rem;
    padding: 1.875rem 0;
    --gap: 3rem;
}

#result,
#compliment {
    --gap: 1rem;
}

.compliment-text {
    width: 70%;
}

main > .grid-container #summary-area {
    grid-area: summary-area;
    padding: 1.875rem;
    --gap: 1.5rem;
}

@media (min-width: 28em) {
    body {
        background-color: #F5F5F5;
    }
    
    main {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    main > .grid-container {
        background-color: hsl( var(--clr-white) );
        width: 28rem;
        box-shadow: 0.625rem 2.5rem 3.75rem hsl( var(--clr-accent4-dark) / 0.1);
    }

    main > .grid-container, 
    main > .grid-container #summary-area,
    main > .grid-container #result-area {
        border-radius: 1.875rem;
    }
}

@media (min-width: 64em) {
    main > .grid-container {
        width: 47rem;
        grid-template-areas: 
        'result-area summary-area';
        grid-template-columns: repeat(2, 50%);
    }

    main > .grid-container #result-area,
    main > .grid-container #summary-area {
        height: 100%;
        width: 100%;
    }
}


/* Attribution*/
.attribution { font-size: 1rem; text-align: center; }
.attribution a { color: hsl(228, 45%, 44%); }


/* 
Nog doen:

* why does fetch() not need to use parse() to get the json data? (see js file)
* refactor js file to use less code (see scrimba front en path project for inspiration), maybe 
change divs in html into list items
https://scrimba.com/learn/frontend/use-the-chrome-api-to-get-the-tab-cof4d4a9b8e6dea505a0b1679
* prevent errors when json file is (partly) empty (with catch??)

* read me file 
* post on frontendmentor

* attribution space site
* read me space site
*/